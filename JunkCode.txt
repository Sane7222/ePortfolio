### Restful API Request ###

private static async Task<(List<Repository>?, HashSet<string>)> FetchReposRest()
{
    List<Repository>? repositories = null;
    HashSet<string> topics = new();

    using var client = new HttpClient();
    client.BaseAddress = new Uri("https://api.github.com/");
    client.DefaultRequestHeaders.Accept.Clear();
    client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    client.DefaultRequestHeaders.Add("User-Agent", "request");

    HttpResponseMessage response = await client.GetAsync("users/USER_NAME/repos");

    if (response.IsSuccessStatusCode) {
        using var responseStream = await response.Content.ReadAsStreamAsync();
        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
        repositories = await JsonSerializer.DeserializeAsync<List<Repository>?>(responseStream, options);

        if (repositories != null) {
            foreach (var repo in repositories) {
                repo.ProcessTopics();

                foreach (var topic in repo.Topics) {
                    topics.Add(topic); // Add each topic to the HashSet
                }
            }
        }
    }

    return (repositories, topics);
}

### AJAX Restful API Requests ###

var requests = [];

var repositories = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(repos));
repositories.forEach(function (repo) {
    var repoCard = $('#' + repo.Name);

    var request = $.ajax({
        url: repo.languages_url,
        method: 'GET',
        dataType: 'json',
        success: function (languages) {
            var languagesArray = Object.keys(languages); // Extracting language names
            var languagesString = languagesArray.join(', '); // Create a string of languages

            repoCard.attr('data-languages', languagesString); // Store languages in project card
        },
    });
    requests.push(request);
});
completeLanguageRequests(requests);

function insertSubOpts(opts, name) {
    // Update sub-options under "name" filter
    var subOpts = opts.map(function (opt) {
        return '<span data-type="' + name + '" data-filter="' + opt + '">' + opt + '</span>\n';
    });

    $('.filter-option[data-filter="' + name + '"] .sub-options').append(subOpts);
}

function filterClick() {
    // Add Click functionality to sub-options
}

function completeLanguageRequests(langRequests) {
    // Wait for all AJAX requests to complete
    $.when.apply($, langRequests).done(function () {
        var allLanguages = [];

        $.each(arguments, function (index, response) {
            var languages = response[0];
            allLanguages = allLanguages.concat(Object.keys(languages));
        });

        allLanguages = Array.from(new Set(allLanguages)).sort(); // Remove duplicates

        var indexToRemove = allLanguages.indexOf('Makefile');
        if (indexToRemove !== -1) allLanguages.splice(indexToRemove, 1); // Remove 1 element starting from the index

        insertSubOpts(allLanguages, 'languages');

        filterClick();
    });
}